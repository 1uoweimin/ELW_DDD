// <auto-generated />
using System;
using ListeningService.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ListeningService.Infrastructure.Pg_Migrations
{
    [DbContext(typeof(ListeningDbContext))]
    partial class ListeningDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ListeningService.Domain.Entities.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId", "IsDeleted");

                    b.ToTable("T_Listening_Album", (string)null);
                });

            modelBuilder.Entity("ListeningService.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CoverUrl")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("T_Listening_Categories", (string)null);
                });

            modelBuilder.Entity("ListeningService.Domain.Entities.Episode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<string>("AudioUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DurationInSecond")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId", "IsDeleted");

                    b.ToTable("T_Listening_Episode", (string)null);
                });

            modelBuilder.Entity("ListeningService.Domain.Entities.Album", b =>
                {
                    b.OwnsOne("Zack.DomainCommons.Models.MultilingualString", "Name", b1 =>
                        {
                            b1.Property<Guid>("AlbumId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Chinese")
                                .IsRequired()
                                .HasMaxLength(200)
                                .IsUnicode(true)
                                .HasColumnType("character varying(200)");

                            b1.Property<string>("English")
                                .IsRequired()
                                .HasMaxLength(200)
                                .IsUnicode(true)
                                .HasColumnType("character varying(200)");

                            b1.HasKey("AlbumId");

                            b1.ToTable("T_Listening_Album");

                            b1.WithOwner()
                                .HasForeignKey("AlbumId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("ListeningService.Domain.Entities.Category", b =>
                {
                    b.OwnsOne("Zack.DomainCommons.Models.MultilingualString", "Name", b1 =>
                        {
                            b1.Property<Guid>("CategoryId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Chinese")
                                .IsRequired()
                                .HasMaxLength(200)
                                .IsUnicode(true)
                                .HasColumnType("character varying(200)");

                            b1.Property<string>("English")
                                .IsRequired()
                                .HasMaxLength(200)
                                .IsUnicode(true)
                                .HasColumnType("character varying(200)");

                            b1.HasKey("CategoryId");

                            b1.ToTable("T_Listening_Categories");

                            b1.WithOwner()
                                .HasForeignKey("CategoryId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("ListeningService.Domain.Entities.Episode", b =>
                {
                    b.OwnsOne("Zack.DomainCommons.Models.MultilingualString", "Name", b1 =>
                        {
                            b1.Property<Guid>("EpisodeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Chinese")
                                .IsRequired()
                                .HasMaxLength(200)
                                .IsUnicode(true)
                                .HasColumnType("character varying(200)");

                            b1.Property<string>("English")
                                .IsRequired()
                                .HasMaxLength(200)
                                .IsUnicode(true)
                                .HasColumnType("character varying(200)");

                            b1.HasKey("EpisodeId");

                            b1.ToTable("T_Listening_Episode");

                            b1.WithOwner()
                                .HasForeignKey("EpisodeId");
                        });

                    b.OwnsOne("ListeningService.Domain.ValueObjects.Subtitle", "Subtitle", b1 =>
                        {
                            b1.Property<Guid>("EpisodeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasMaxLength(2147483647)
                                .IsUnicode(true)
                                .HasColumnType("text");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasMaxLength(10)
                                .IsUnicode(false)
                                .HasColumnType("character varying(10)");

                            b1.HasKey("EpisodeId");

                            b1.ToTable("T_Listening_Episode");

                            b1.WithOwner()
                                .HasForeignKey("EpisodeId");
                        });

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Subtitle")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
